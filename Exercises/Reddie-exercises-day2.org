#+TITLE: REDDIE WP4 meeting -- Exercises 
#+Date: May 23, 2023
#+LaTeX_CLASS: org-article
#+OPTIONS: toc:nil
#+LaTeX_HEADER:\author{Section of Biostatistics, University of Copenhagen}
#+LaTeX_HEADER:\usepackage{authblk}
#+LaTeX_HEADER:\usepackage{natbib}
#+setupfile:~/emacs-genome/snps/org-templates/setup-all-purpose.org

* Exercise 1 (~40 minutes)

The aim of the excersise is to run LTMLE on simulated data where we
focus on the structure of the input and the output of the function
=Ltmle= which uses our augmented version of the =ltmle= package.

** Load the R-code

The R-code for the praticals are distributed across different folders:
- =Ltmle/R= the modified Ltmle package
- =Ltmle/R= augmentation functions
- =Exercises/functions= simulation functions

#+BEGIN_SRC R  :results silent :exports code  :session *R* :cache yes  
library(data.table)
library(lava)
try(setwd("~/research/Methods/TMLE_for_breakfast/"),silent=TRUE)
try(setwd("Your/Path/To/TMLE_for_breakfast/"),silent=TRUE)
library(targets)
for (f in list.files("./Ltmle/R/",pattern = "R$",full.names = TRUE)){source(f)}
for (f in list.files("./Ltmle/augmentation/",pattern = "R$",full.names = TRUE)){source(f)}
for (f in list.files("./Exercises/functions/",pattern = "R$",full.names = TRUE)){source(f)}
#+END_SRC


** Simulate data in wide format

#+BEGIN_SRC R  :results silent  :exports code  :session *R* :cache yes
set.seed(20230523)
d <- simulate_rdata(n = 780)
outcome_data <- d[,c("pnr",grep("Y|C|D",names(d), value = TRUE)), with = FALSE]
treatment_data <- d[,c("pnr",grep("A",names(d), value = TRUE)), with = FALSE]
baseline_data <- d[,.(pnr,V)]
timevar_data <- d[,c("pnr",grep("L",names(d), value = TRUE)), with = FALSE]
#+END_SRC


** Prepare the data for LTMLE

#+BEGIN_SRC R  :results silent :exports code  :session *R* :cache yes  
pl <- prepare_Ltmle(outcome_data = list("Y"=outcome_data),regimen_data = list("A"=treatment_data),baseline_data = baseline_data,timevar_data = timevar_data,time_horizon = 3,deterministic.Q.function = NULL,name_outcome = "Y",name_regimen = "A",name_censoring = "C",censored_label = "0",name_comp.event = "D",order_YC=TRUE,abar = list(c(1,1,1),c(0,0,0)))
pl
#+END_SRC


** Run LTMLE and check output format

#+BEGIN_SRC R  :results silent  :exports code  :session *R* :cache yes
fit <- do.call(Ltmle, pl)
print(fit)
names(fit)
summary(fit)
#+END_SRC

** See what happens while LTMLE is running

#+BEGIN_SRC R  :results silent  :exports code  :session *R* :cache yes
pl$verbose=TRUE
fit <- do.call(Ltmle, pl)
#+END_SRC

** One treatment regimen at a time

#+BEGIN_SRC R  :results silent  :exports code  :session *R* :cache yes
pl$verbose=FALSE
pl$abar=c(1,1,1)
fit <- do.call(Ltmle, pl)
summary(fit)
#+END_SRC

** Increase number of time points

#+BEGIN_SRC R  :results silent  :exports code  :session *R* :cache yes
pl10 <- prepare_Ltmle(outcome_data = list("Y"=outcome_data),
                    regimen_data = list("A"=treatment_data),
                    baseline_data = baseline_data,
                    timevar_data = timevar_data,
                    time_horizon = 10,
                    deterministic.Q.function = NULL,
                    name_outcome = "Y",
                    name_regimen = "A",
                    name_censoring = "C",
                    censored_label = "0",
                    name_comp.event = "D",
                    abar = list(rep(1,10),rep(0,10)))
fit10 <- do.call(Ltmle, pl10)
summary(fit10)
#+END_SRC

** Penalized regression

#+BEGIN_SRC R  :results silent  :exports code  :session *R* :cache yes
pl10.penal <- prepare_Ltmle(outcome_data = list("Y"=outcome_data),
                      regimen_data = list("A"=treatment_data),
                      baseline_data = baseline_data,
                      timevar_data = timevar_data,
                      time_horizon = 10,
                      deterministic.Q.function = NULL,
                      name_outcome = "Y",
                      name_regimen = "A",
                      name_censoring = "C",
                      censored_label = "0",
                      name_comp.event = "D",
                      SL.library="glmnet",
                      SL.cvControl=list(selector="min",alpha=0),
                      abar = list(rep(1,10),rep(0,10)),
                      verbose=TRUE)
fit10.penal <- do.call(Ltmle, pl10.penal)
summary(fit10.penal)
#+END_SRC

** Further exercises

- Increase the sample size (second R-chunk) and re-run everything
- Add random noise baseline variables until =glm= breaks down but =glmnet= still runs.
- Change the value of alpha which controls the transition from LASSO to ridge via elastic net


* Exercise 2 (~45 minutes)

The aim of the excersise is to run LTMLE on simulated data where we
focus on the sequential regression (g-formula).

** Estimate using sequential regression G-formula with 1 time point

#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
pl1.g <- prepare_Ltmle(outcome_data = list("Y"=outcome_data),regimen_data = list("A"=treatment_data),baseline_data = baseline_data,timevar_data = timevar_data,time_horizon = 1,deterministic.Q.function = NULL,name_outcome = "Y",name_regimen = "A",name_censoring = "C",censored_label = "0",name_comp.event = "D",SL.library="glm",gcomp=TRUE,order_YC=FALSE,SL.cvControl=list(selector="min",alpha=0),abar = list(rep(1,1),rep(0,1)),verbose=TRUE)
fit1.g <- do.call(Ltmle, pl1.g)
summary(fit1.g)
#+END_SRC

** Estimate G-formula manually with 1 time point

#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
pl1.g <- prepare_Ltmle(outcome_data = list("Y"=outcome_data),regimen_data = list("A"=treatment_data),baseline_data = baseline_data,timevar_data = timevar_data,time_horizon = 1,deterministic.Q.function = NULL,name_outcome = "Y",name_regimen = "A",name_censoring = "C",censored_label = "0",name_comp.event = "D",SL.library="glmnet",gcomp=TRUE,SL.cvControl=list(selector="min",alpha=0),abar = list(rep(1,1),rep(0,1)),verbose=TRUE)
test <- glm(Y_1~A_0+L_0+V,data=pl1.g$data,family="binomial")
glm.Y1 <- glm(Y_1~A_0+L_0+V,data=pl1.g$data[C_1=="uncensored"],family="binomial")
summary(fit1.g)
#+END_SRC



** Estimate using sequential regression G-formula with 10 time points

#+BEGIN_SRC R  :results output :exports code  :session *R* :cache yes  
pl10.g <- prepare_Ltmle(outcome_data = list("Y"=outcome_data),
                      regimen_data = list("A"=treatment_data),
                      baseline_data = baseline_data,
                      timevar_data = timevar_data,
                      time_horizon = 10,
                      deterministic.Q.function = NULL,
                      name_outcome = "Y",
                      name_regimen = "A",
                      name_censoring = "C",
                      censored_label = "0",
                      name_comp.event = "D",
                      SL.library="glmnet",
                      gcomp=TRUE,
                      SL.cvControl=list(selector="min",alpha=0),
                      abar = list(rep(1,10),rep(0,10)),
                      verbose=TRUE)
fit10.g <- do.call(Ltmle, pl10.g)
summary(fit10.g)
#+END_SRC



* Exercise 3 (~35 minutes)

** Estimate the target parameter using inverse treatment/censoring weighting

#+BEGIN_SRC R  :results output drawer :exports code  :session *R* :cache yes  
pl10.iptw <- prepare_Ltmle(outcome_data = list("Y"=outcome_data),regimen_data = list("A"=treatment_data),baseline_data = baseline_data,timevar_data = timevar_data,time_horizon = 10,deterministic.Q.function = NULL,name_outcome = "Y",name_regimen = "A",name_censoring = "C",censored_label = "0",name_comp.event = "D",SL.library="glm",iptw.only=TRUE,abar = list(rep(1,10),rep(0,10)),verbose=FALSE)
fit10.iptw <- do.call(Ltmle, pl10.iptw)
summary(fit10.iptw,estimator="iptw")
#+END_SRC


** Use ltmle defaul g-bounds

#+BEGIN_SRC R  :results output drawer :exports code  :session *R* :cache yes  
pl10.iptw.bounded <- prepare_Ltmle(outcome_data = list("Y"=outcome_data),
                                   regimen_data = list("A"=treatment_data),
                                   baseline_data = baseline_data,
                                   timevar_data = timevar_data,
                                   time_horizon = 10,
                                   deterministic.Q.function = NULL,
                                   name_outcome = "Y",
                                   name_regimen = "A",
                                   name_censoring = "C",
                                   censored_label = "0",
                                   name_comp.event = "D",
                                   SL.library="glm",
                                   iptw.only=FALSE,
                                   gbounds=c(0.3,.7),
                                   abar = list(rep(1,10),rep(0,10)),
                                   verbose=FALSE)
fit10.iptw.bounded <- do.call(Ltmle, pl10.iptw.bounded)
summary(fit10.iptw.bounded,estimator="iptw")
summary(fit10.iptw.bounded,estimator="tmle")
#+END_SRC

#+RESULTS[(2023-05-19 19:37:27) 03882b7bd61bfb8bb6e8b2b3f3555c1c47502246]:
:results:
[1] 0.3 0.7
Warning message:
In CheckForVarianceWarning(inputs, g.ratio) :
  Variance estimate is based on influence curve only, which may be significantly anticonservative because your data appears to contain positivity violations. Robust variance estimate is not currently available with deterministic.Q.function but this will be addressed in a future release.
   Target_parameter Estimator  estimate    std.err     lower     upper       pvalue
1:              ATE      iptw 0.2653226 0.01457696 0.2367523 0.2938929 5.020909e-74
2:     RelativeRisk      iptw 3.4191176 0.12271074 2.6882055 4.3487617 1.263550e-23
:end:

** Use LASSO instead of unpenalized logistic regression

#+BEGIN_SRC R  :results output drawer :exports code  :session *R* :cache yes  
pl10.iptw <- prepare_Ltmle(outcome_data = list("Y"=outcome_data),regimen_data = list("A"=treatment_data),baseline_data = baseline_data,timevar_data = timevar_data,time_horizon = 10,deterministic.Q.function = NULL,name_outcome = "Y",name_regimen = "A",name_censoring = "C",censored_label = "0",name_comp.event = "D",SL.library="glmnet",iptw.only=TRUE,SL.cvControl=list(selector="min",alpha=0),abar = list(rep(1,10),rep(0,10)),verbose=FALSE)
fit10.iptw <- do.call(Ltmle, pl10.iptw)
summary(fit10.iptw,estimator="iptw")
#+END_SRC
